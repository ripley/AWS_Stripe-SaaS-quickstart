AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  StripeSecretKey:
    Type: String
    Description: Stripe Secret Key
  StripeWebHookSecret:
    Type: String
    Description: Stripe Web Hook Secret

Resources:
  DomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !ImportValue SaaS-RegionalCertArn
      DomainName: !Sub
      - stripe.${Domain}
      - { Domain: !ImportValue SaaS-RootDomain }
      EndpointConfiguration:
        Types:
          - REGIONAL

  BasePathMapping:
    DependsOn:
      - StripeWebHookApiDeployment0
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref StripeWebHookApi
      Stage: Dev

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !ImportValue SaaS-HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt DomainName.RegionalHostedZoneId
        DNSName: !GetAtt DomainName.RegionalDomainName

  StripeWebHookApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          /payment-success:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StripeWebHookFunction.Arn}/invocations
              responses: {}
            options:
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode" : 200
                    }
                responses:
                  default:
                    statusCode: '200'
                    responseTemplates:
                      application/json: |
                        {}
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                      method.response.header.Access-Control-Allow-Methods: '''*'''
                      method.response.header.Access-Control-Allow-Headers: '''*'''
              consumes:
                - application/json
              summary: CORS support
              responses:
                '200':
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                  description: Default response for CORS method
              produces:
                - application/json
        swagger: '2.0'
 
  StripeWebHookApiDeployment0:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref StripeWebHookApi
      Description: 'RestApi deployment id: 0'
      StageName: Dev

  StripeWebHookFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !ImportValue SaaS-CodeBucketName
        S3Key: StripeWebHook.zip
      Environment:
        Variables:
          STRIPE_SECRET_KEY: !Ref StripeSecretKey
          STATE_MACHINE_ARN: !ImportValue SaaS-UserManagerStateMachineArn
          USER_TABLE_NAME: !ImportValue SaaS-UserTableName
          STRIPE_WEB_HOOK_SECRET: !Ref StripeWebHookSecret
      Handler: main.handler
      Role: !GetAtt StripeWebHookLambdaRole.Arn
      Runtime: python3.8

  StripeWebHookPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref StripeWebHookFunction
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/payment-success
        - __Stage__: '*'
          __ApiId__: !Ref StripeWebHookApi

  StripeWebHookLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: AccessProductsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'dynamodb:GetItem*'
                  - 'dynamodb:UpdateItem*'
                Resource: !ImportValue SaaS-UserTableArn
                Effect: Allow
        - PolicyName: UserManagerStateMachinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'states:StartExecution'
                  - 'states:StopExecution'
                Resource:
                  - !Sub >-
                    arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:StateMachine-*
                  - !Sub >-
                    arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:StateMachine-*
                Effect: Allow
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
 
